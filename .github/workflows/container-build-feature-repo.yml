# This workflow will build a Docker container, including running any tests which
# are part of the build process.
#
# If the workflow is triggered as part of an explicit dispatch, pull request, or
# push to master/main then the image will also be pushed to ECR.

name: Container build

on:
  workflow_call:
    inputs:
      ecrRepo:
        required: false
        type: string
        default: 'botsandus/arri/arri-ros'
        description: The path of the ECR repository to use
      dockerfile:
        required: false
        type: string
        default: '.balena/Dockerfile'
        description: The path of the Dockerfile to use, relative to the root
      runner:
        required: false
        type: string
        default: '["ubuntu-latest"]'
        description: A JSON payload describing the runner to use. Currently ignored because we use an AWS runner.
      # below variables need setting if a feature repo wants to run the CI
      # and checkout one ore more feature branches
      featureName:
        required: false
        type: string
        default: ${{ github.head_ref || github.ref_name }} # for build on default branch + default *.repos
        description: This branch is the one that needs to be checked out,
          and that helps iterating through `src` to checkout related branches
      integrationRepo:
        required: false
        type: string
        default: 'botsandus/auto'
        description: The repository that should be checked out to run the CI
      triggeringRepo:
        required: false
        type: string
        default: ${{ github.event.repository.name }}
        description: The repository that triggered the workflow to better tag the image

jobs:
  style:
    runs-on: ubuntu-latest
    container:
      image: ros:iron-ros-base
      options: --user root
    steps:
      - name: Chown user
        run: |
          sudo chown -R $USER:$USER $GITHUB_WORKSPACE
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Debug
        run: pwd && ls -lah
      - name: Run pre-commit
        uses: pre-commit/action@v3.0.0

  start-runner:
    name: Start build runner on EC2
    needs: style
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
      - name: Start EC2 runner
        id: start-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.GIT_CHECKOUT_PAT }}
          ec2-image-id: ami-05812e184667c743d
          ec2-instance-type: c5.12xlarge
          subnet-id: subnet-0e27677c93c0f2de5
          security-group-id: sg-0e93c4983459846f8
          aws-resource-tags: >
            [
              {"Key": "Name", "Value": "ec2-auto-github-runner"}
            ]

  build:
    needs: start-runner
    runs-on: ${{ needs.start-runner.outputs.label }}

    steps:
      - name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v1

      - name: Checkout with submodules
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.integrationRepo }}
          submodules: recursive
          token: ${{ secrets.GIT_CHECKOUT_PAT }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
          mask-aws-account-id: false

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Calculate tags
        id: tag-calculator
        run: |
          REPO=${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecrRepo }}
          BRANCH=${{ inputs.featureName }}
          BRANCH=${BRANCH//[^a-zA-Z0-9\-]/\-} # Strip any invalid characters

          BUILD_TAG=$REPO:build-${{ github.run_number }}-${{ inputs.triggeringRepo }}-${BRANCH}

          echo "::set-output name=tags::$BUILD_TAG"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push the container
        id: build
        uses: docker/build-push-action@v3
        env:
          DOCKER_BUILDKIT: 1
        with:
          context: .
          file: ${{ inputs.dockerfile }}
          push: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'pull_request' || (github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')) }}
          build-args: |
            GIT_CHECKOUT_PAT=${{ secrets.GIT_CHECKOUT_PAT }}
            BUILD_NUMBER=${{ github.run_number }}
            FEATURE_NAME=${{ inputs.featureName }}
            TRIGGERING_REPO=${{ inputs.triggeringRepo }}
          tags: ${{ steps.tag-calculator.outputs.tags }}
          # cache-from: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecrRepo }}:github-action-build-cache
          # cache-to: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecrRepo }}:github-action-build-cache,mode=max

  stop-runner:
    name: Stop build runner on EC2
    needs:
      - start-runner # This is required so that we can access the output
      - build
    runs-on: ubuntu-latest
    if: always() # Always stop the runner even if jobs failed
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.GIT_CHECKOUT_PAT }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}

      - uses: act10ns/slack@v1
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status:  ${{ job.status }}
          channel: '#autonomy-notifications'
